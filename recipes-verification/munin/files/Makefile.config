# -*- makefile -*-
#
# This is the Makefile.config file to use for a "clean" distribution.
#
# This file specifies where Munin will look for things after you've
# run 'make' in the source directory.  Modify it to suit your needs.

# DESTDIR is meant only for use when making Munin packages.  Unless
# you're doing packaging do NOT set it.
# DESTDIR is empty during building, and optionally set to point to
# a shadow tree during make install.

# Note: There is a need for a VARDIR, with DBDIR, PLUGSTATE, HTMLDIR
# and LOGDIR as subdirectories.  Today, DBDIR contains configured
# domains, as well as PLUGSTATE, and we risk collisions.

#
# the base of the Munin installation.
#
PREFIX     = $(DESTDIR)/

# Where Munin keeps its configurations (server.conf, client.conf, ++)
CONFDIR    = $(DESTDIR)/etc/munin

# Server only - where to put munin-cron
BINDIR     = $(PREFIX)/usr/bin

# Client only - where to put munin-node, munin-node-configure, and munin-run
SBINDIR    = $(PREFIX)/usr/sbin

# Where to put text and html documentation
DOCDIR     = $(PREFIX)/usr/share/doc

# Where to put man pages
MANDIR     = $(PREFIX)/usr/share/man

# Where to put internal binaries and plugin repository
LIBDIR     = $(PREFIX)/usr/share/munin

# Server only - Output directory
HTMLDIR    = $(PREFIX)/www/docs
CGIDIR     = $(PREFIX)/www/cgi

# Where to put internal data for master (RRD, internal files, ...)
DBDIR      = $(DESTDIR)/var/lib/munin

# Where to put internal data for node (plugin state, ...)
DBDIRNODE  = $(DESTDIR)/var/lib/munin-node

# Client only - Where the spool files are written. Must be writable by
# group "munin", and should be preserved between reboots
SPOOLDIR   = $(DBDIR)/var/spool

# Client only - Where plugins should put their states. Must be writable by
# group "munin", and should be preserved between reboots
PLUGSTATE  = $(DBDIRNODE)/plugin-state

# Where Munin should place its logs.
LOGDIR     = $(PREFIX)/var/log/munin

# Location of PID files and other statefiles. On the server, must be
# writable by the user "munin".
STATEDIR   = $(DESTDIR)/var/run/munin

# The perl interpreter to use
PERL       := /usr/bin/perl

# The python interpreter to use (used by some plugins)
PYTHON     := /usr/bin/env python3

# The ruby interpreter to use (used by some plugins)
RUBY       := /usr/bin/env ruby

# The java runtime to use (used by some plugins)
JAVARUN    := /usr/bin/java

# The java library dir to use (used by some plugins)
# this is needed in order to be able to install
# java libraries in a custom location. Many distributions
# enforce a spesific location for java libraries.
JAVALIBDIR = $(LIBDIR)


# A modern (posix) shell.  We're not looking for arrays, but $() and
# other modern stuff is expected.  On a posix-system the expression
# below will find the right shell.  Most Unixes released the last 10
# years are POSIX compliant enough for this to work (he said bravely).
#
# On Linux /bin/sh, SunOS/Solaris /usr/xpg4/bin/sh or /bin/ksh
# In general: bash or ksh will work
#
GOODSH     := /bin/sh

# Path of bash for bash specific plugins
BASH       := /bin/bash

# Server only - Where to install the perl libraries
PERLLIB    = $(DESTDIR)/etc/perl

# Client only - Install plugins for this architecture
# the LANG=C makes tr work as expected, not regarding any locale it
# isn't done globally to enable users to have as much localized
# errors as possible
OSTYPE     := linux

# How to figure out the hostname. (Only used in default configuration
# files)
HOSTNAME   := $(shell hostname)

# What is the safest way to create a tempfile.
# Default is to figure it out by testing various methods.
# Replace this with a known platform-specific method
MKTEMP     := /bin/mktemp

# Munin version number.
VERSION    := $(shell ./getversion)

# User to run munin as
USER       := munin
GROUP      := munin

# Default user to run the plugins as
PLUGINUSER := nobody

# Default user to run the cgi as
CGIUSER := nobody

CHOWN      := chown
CHMOD      := chmod
CHGRP      := chgrp

# Java compiler stuff - only needed on the buildhost
JC         := javac
JFLAGS     := -g -source 1.7 -target 1.7 -Xlint
JAR        := jar

# Check if the java compiler works
#    Note that we defer JCVALID evaluation to runtime, 
#    since $(JC) can be redefined later in a specific Makefile.config
#    The core Makefile.config is then used as a Makefile.default
JCVALID    = $(shell $(JC) -version >/dev/null 2>/dev/null && echo "yes")

# Check whether setruid functionality can be used
HASSETR    := $(shell perl -e 'use Config; my @vars=("d_setruid", "d_setreuid", "d_setresuid"); foreach my $$var (@vars) { if ($$Config{$$var} eq "define") { print "1\n"; exit 0; } } print "0\n"; exit 0;' )
