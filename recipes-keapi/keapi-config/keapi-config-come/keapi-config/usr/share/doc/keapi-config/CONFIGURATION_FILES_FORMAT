===============================================================================
Configuration files format.
===============================================================================

Content
=======================================
1.0 Overview
2.0 Configuration file storage.conf
2.1 Configuration file gpio.conf
2.2 Configuration file i2c.conf, smbus.conf
2.3 Configuration file watchdog.conf
2.4 Configuration file systemstates.conf
2.5 Configuration file spi.conf and backlight.conf
3.0 Description of intruder amd bootcount0 symbolic links

1.0 Overview
=======================================
This document describes format of configuration files which could be used
by KEAPI.

In general can be used the following files:
- storage.conf,
- gpio.conf,
- i2c.conf,
- smbus.conf,
- watchdog.conf,
- systemstates.conf,
- spi.conf,
- backlight.conf.

All files are placed in the "/etc/keapi" directory of target file system.

All of them have json format, except last ones: spi.conf, backlight.conf,
- they use old format "one string = one path". It will described later. 

Also there can be used two symbolic links:
- intruder,
- bootcount0.

These symlinks usual point to some binary files in /dev/ or /sys/ directories.
Reading these files we getting status of intruder sensor or quantity
of machine boots.


2.0 Configuration file storage.conf
=======================================

Configuration file storage.conf contains information about available for user
eeproms. If eeprom doesn't contain user data area, but contains data according
PICMG specification and this data is important for the system, this eeprom
also should be described in configuration file.

Example of configuration file /etc/keapi/storage.conf:
--------- START OF FILE ---------
{
    "storage": [
        {
            "path": "/dev/keapi_eeprom",
            "type": "picmg"
        },
        {
            "path": "/sys/bus/i2c/devices/3-0050/eeprom",
            "start": "0",
            "size": "0x400"
        }
    ]
}
---------- END OF FILE ----------

Here is an array of eeproms. Each item in array describe one eeprom:
- path - describes path to binary file in system;
- type - if eeprom contain picmg data it should be pointed here by writing
"picmg" type. Otherwise it will be mean that eeprom doesn't contain picmg.
- start - if eeprom is non-picmg, you must specify the start offset of user's
data.
- size - if eeprom is non-picmg,  you must specify the size of data available
for user beginning from start offset.

If eeprom contains valid picmg data, KEAPI will parse all tables and if
the eeprom also contain user data area keapi will detect this.
So in that case not necessarily specify start offset and size of user data area.


2.1 Configuration file gpio.conf
=======================================

This configuration file contains information about gpio pins, to which KEAPI
provides access. Gpio pins in KEAPI divided into groups of 32 pins in each.
Each such group named - port. Main part of configuration file represent array
of gpio ports.

But for successful work with 8 gpio in one call, h/w driver of
gpio must have special capabilities and interfaces. Because no such drivers at
the moment, KEAPI also support old access method to gpio - through sysfs.
Old access method assumes that each gpio must be described one gpio per one
port and index of that gpio in port always is 0.

An example /etc/keapi/gpio.conf:
--------- START OF FILE ---------
{
    "gpioStyle": "linux-like",
    "gpioPort": [
        {
            "gpio": [
                {
                    "gpioIdx": 0,
                    "gpioNum": 0,
                    "directionCaps": "I"
                },
                {
                    "gpioIdx": 1,
                    "gpioNum": 1,
                    "directionCaps": "O"
                }
            ]
        },
        {
            "gpio": [
                {
                    "gpioIdx": 0,
                    "gpioNum": 1,
                    "directionCaps": "A"
                }
            ]
        }
    ]
}
---------- END OF FILE ----------

- gpioStyle - describes access method to gpio pins. It may be "linux-like" or
"keapi-full". "linux-like" - means that old access method to gpio will be used
and in configuration file all gpio pins are described as one pin per one port.
"keapi-full"(while not used) - modern access method will be used (need special
kontron driver). All gpio pins should be described according h/w and driver
specific.
- gpioPort - array contains ports descriptions. 
- gpio - the only element in each port. It contains only an array of gpio pins. 
- gpioIdx - specifies gpio number in port among all 32 pins.
- gpioNum - specifies gpio real number (uses for linux-like access method).
- directionCaps - specifies pin's capabilities. It may be:
    I - pin works only as input;
    O - pin works only as output;
    A - pin works only as inputs as well as output.


2.2 Configuration files i2c.conf, smbus.conf
=======================================

These configuration files contain information about i2c and smbus in system.
They have similar format.

An example of /etc/keapi/smbus.conf:
--------- START OF FILE ---------
{
    "type": "smbus",
    "bus": [
        {
            "unit": 0,
            "name": "SMBus ITE8516K adapter"
        }
    ]
}
---------- END OF FILE ----------

- type - specifies type of bus which describes this file. It could be "i2c"
or "smbus".
- bus - array which contains information about buses available for KEAPI.
Format of array is the same as for i2c as well as for smbus configuration files.
Each element in array contains:
- name - specifies name of bus. Name of a buses you can see
in /sys/bus/i2c/devices/i2c-*/name.
- unit - if in system there are more than one bus with the same name, field unit
enables us to determine the order of these buses.

If you don't want enable any i2c or smbus buses for KEAPI you must make
configuration file without specified buses.

For example empty configuration file /etc/keapi/i2c.conf:
--------- START OF FILE ---------
{
    "type": "i2c",
    "bus": []
}
---------- END OF FILE ----------

Note that if you don't create configuration files for i2c or smbus, KEAPI will
try to get list of buses with old methods itself.


2.3 Configuration files watchdog.conf
=======================================

Simple configuration file contains information which describes capabilities 
of a system  watchdog.

Example of /etc/keapi/watchdog.conf:
--------- START OF FILE ---------
{
    "minTimeout": 1000,
    "maxTimeout": 255000,
    "wdtPath": "/dev/watchdog",
    "wdtStyle": "linux-like"
}
---------- END OF FILE ----------

- minTimeout - parameter specifies minimal available to setup timeout
for watchdog trigger.
- maxTimeout - parameter specifies maximum available to setup timeout
for watchdog trigger.
- wdtPath - parameter specifies path to binary file in the system. Sometimes on
the system are several watchdogs and gives us ability to select between those.
This is not mandatory parameter, by default KEAPI will access to /dev/watchdog.
- wdtStyle - parameter specifies extensions abilities of watchdog.
It maybe:
 -- "linux-like" - means that on system is supported standard Linux watchdog
(i.e. one stage and only RESET mode is supported);
 -- "kontron-like-kem" - means that on system is supported Kontron KEM
specific watchdog (i.e. 2 stages are supported and RESET mode is supported);
 -- "kontron-like-kom" - means that on system is supported Kontron KOM
specific watchdog (i.e. stages are supported and RESET, IRQ and TIMEOUT modes
are supported).


2.4 Configuration files systemstates.conf
=======================================

This configuration file describes system performance states. Overall KEAPI
supports 16 performance states, which numerated from 0 to 15. Zero state is
not described in configuration file as it always means maximum performance.

Configuration file consist from array where each element is description of one
state.

Example of /etc/keapi/systemstates.conf:
--------- START OF FILE ---------
{
    "state": [
        {
            "stateNum": 1,
            "description": "CPUfreq policy set to 'userspace' and frequency set to 2100Mhz for all cores",
            "condition": [
                {
                    "key": "cpugov",
                    "value": "userspace"
                },
                {
                    "key": "cpufreq",
                    "value": "2001000"
                }
            ]
        },
        {
            "stateNum": 2,
            "description": "CPUfreq policy set to 'powersave' for all cores",
            "condition": [
                {
                    "key": "cpugov",
                    "value": "userspace"
                }
            ]
        },
        {
            "stateNum": 3,
            "description": "CPUfreq policy set to 'ondemand' for all cores",
            "condition": [
                {
                    "key": "cpugov",
                    "value": "ondemand"
                }
            ]
        }
    ]
}
---------- END OF FILE ----------

- state - main array comprising states descriptions.
- stateNum - order number of describing state.
- description - human understandable description of certain state.
- condition - array of conditions which allow KEAPI sets up system to this state
or define that system is in that state.
Each condition consist of pair "key" and "value"
- key - at the moment there are two keys:
    - cpugov - describes policy of CPU service;
    - cpufreq - describes frequency of CPU;
    - cpuipstmax - describes maximum performance for CPU
        for Intel P-state driver;
    - cpuipstmin - describes minimum performance for CPU
        for Intel P-state driver;
- value - if key = cpugov, value can be described as userspace, conservative,
ondemand, performance and powersave.
To know more about these policies please refer to Linux Kernel Documentation.
If key = cpufreq, value can consist one of  available CPU frequencies.


2.5 Configuration files spi.conf and backlight.conf
=======================================

Format of these configuration files is extrasimple
It allows us just specify which spi buses or backlight and its order will be
used by KEAPI.

Example of /etc/keapi/spi.conf:
--------- START OF FILE ---------
/dev/spidev3
/dev/spidev2
---------- END OF FILE ----------

In this example we do not use spidev1 at all and we have changed order of
second and third buses.

Example of /etc/keapi/backlight.conf:
--------- START OF FILE ---------
/sys/class/backlight/acpi_video0
---------- END OF FILE ----------
 
 In the system we also have intel backlight driver which controls backlight
 for the  same display, but in this file we specify  that KEAPI will be use
 default acpi backlight driver.


3.0 Description of intruder and bootcount0 symbolic links
=======================================

KEAPI works with intrusion detector and bootcounter through standard sysfs
interfaces, but depends of system and used drivers, binary files of intrusion
sensor and bootcounter can be located by different paths.
To prevent it, KEAPI make calls through intruder and bootcount0 symbolic links
which always are in the same place in /etc/keapi:

An example:
# ls -l /etc/keapi/
total 0
lrwxrwxrwx 1 root root   55 Mar 18 12:44 bootcount0 -> /sys/bus/platform/devices/kt_bootcounter/kt_bootcounter
lrwxrwxrwx 1 root root   43 Mar 18 12:44 intruder -> /sys/kernel/iTCO_intrusion/intrusion0_alarm

Here we see that KEAPI will do calls to intrusion detector via standard ITCO
driver and to bootcounter via standard kontron driver - kt_bootcounter.
